//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebPanoptoAPI.PanoptoAccessManagement {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AuthenticationInfo", Namespace="http://schemas.datacontract.org/2004/07/Panopto.Server.Services.PublicAPI.V40")]
    [System.SerializableAttribute()]
    public partial class AuthenticationInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AuthCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserKeyField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AuthCode {
            get {
                return this.AuthCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.AuthCodeField, value) != true)) {
                    this.AuthCodeField = value;
                    this.RaisePropertyChanged("AuthCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserKey {
            get {
                return this.UserKeyField;
            }
            set {
                if ((object.ReferenceEquals(this.UserKeyField, value) != true)) {
                    this.UserKeyField = value;
                    this.RaisePropertyChanged("UserKey");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserAccessDetails", Namespace="http://schemas.datacontract.org/2004/07/Panopto.Server.Services.PublicAPI.V40")]
    [System.SerializableAttribute()]
    public partial class UserAccessDetails : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid[] FoldersWithCreatorAccessField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid[] FoldersWithViewerAccessField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WebPanoptoAPI.PanoptoAccessManagement.GroupAccessDetails[] GroupMembershipAccessField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid[] SessionsWithViewerAccessField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WebPanoptoAPI.PanoptoAccessManagement.SystemRole SystemRoleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid UserIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid[] FoldersWithCreatorAccess {
            get {
                return this.FoldersWithCreatorAccessField;
            }
            set {
                if ((object.ReferenceEquals(this.FoldersWithCreatorAccessField, value) != true)) {
                    this.FoldersWithCreatorAccessField = value;
                    this.RaisePropertyChanged("FoldersWithCreatorAccess");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid[] FoldersWithViewerAccess {
            get {
                return this.FoldersWithViewerAccessField;
            }
            set {
                if ((object.ReferenceEquals(this.FoldersWithViewerAccessField, value) != true)) {
                    this.FoldersWithViewerAccessField = value;
                    this.RaisePropertyChanged("FoldersWithViewerAccess");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WebPanoptoAPI.PanoptoAccessManagement.GroupAccessDetails[] GroupMembershipAccess {
            get {
                return this.GroupMembershipAccessField;
            }
            set {
                if ((object.ReferenceEquals(this.GroupMembershipAccessField, value) != true)) {
                    this.GroupMembershipAccessField = value;
                    this.RaisePropertyChanged("GroupMembershipAccess");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid[] SessionsWithViewerAccess {
            get {
                return this.SessionsWithViewerAccessField;
            }
            set {
                if ((object.ReferenceEquals(this.SessionsWithViewerAccessField, value) != true)) {
                    this.SessionsWithViewerAccessField = value;
                    this.RaisePropertyChanged("SessionsWithViewerAccess");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WebPanoptoAPI.PanoptoAccessManagement.SystemRole SystemRole {
            get {
                return this.SystemRoleField;
            }
            set {
                if ((this.SystemRoleField.Equals(value) != true)) {
                    this.SystemRoleField = value;
                    this.RaisePropertyChanged("SystemRole");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((this.UserIdField.Equals(value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GroupAccessDetails", Namespace="http://schemas.datacontract.org/2004/07/Panopto.Server.Services.PublicAPI.V40")]
    [System.SerializableAttribute()]
    public partial class GroupAccessDetails : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid[] FoldersWithCreatorAccessField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid[] FoldersWithViewerAccessField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid GroupIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid[] SessionsWithViewerAccessField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WebPanoptoAPI.PanoptoAccessManagement.SystemRole SystemRoleField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid[] FoldersWithCreatorAccess {
            get {
                return this.FoldersWithCreatorAccessField;
            }
            set {
                if ((object.ReferenceEquals(this.FoldersWithCreatorAccessField, value) != true)) {
                    this.FoldersWithCreatorAccessField = value;
                    this.RaisePropertyChanged("FoldersWithCreatorAccess");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid[] FoldersWithViewerAccess {
            get {
                return this.FoldersWithViewerAccessField;
            }
            set {
                if ((object.ReferenceEquals(this.FoldersWithViewerAccessField, value) != true)) {
                    this.FoldersWithViewerAccessField = value;
                    this.RaisePropertyChanged("FoldersWithViewerAccess");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid GroupId {
            get {
                return this.GroupIdField;
            }
            set {
                if ((this.GroupIdField.Equals(value) != true)) {
                    this.GroupIdField = value;
                    this.RaisePropertyChanged("GroupId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid[] SessionsWithViewerAccess {
            get {
                return this.SessionsWithViewerAccessField;
            }
            set {
                if ((object.ReferenceEquals(this.SessionsWithViewerAccessField, value) != true)) {
                    this.SessionsWithViewerAccessField = value;
                    this.RaisePropertyChanged("SessionsWithViewerAccess");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WebPanoptoAPI.PanoptoAccessManagement.SystemRole SystemRole {
            get {
                return this.SystemRoleField;
            }
            set {
                if ((this.SystemRoleField.Equals(value) != true)) {
                    this.SystemRoleField = value;
                    this.RaisePropertyChanged("SystemRole");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SystemRole", Namespace="http://schemas.datacontract.org/2004/07/Panopto.Server.Services.PublicAPI.V40")]
    public enum SystemRole : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        None = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Videographer = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Admin = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SessionAccessDetails", Namespace="http://schemas.datacontract.org/2004/07/Panopto.Server.Services.PublicAPI.V40")]
    [System.SerializableAttribute()]
    public partial class SessionAccessDetails : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WebPanoptoAPI.PanoptoAccessManagement.FolderAccessDetails FolderAccessField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid[] GroupsWithDirectViewerAccessField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool InheritViewerAccessField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsPublicField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid SessionIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid[] UsersWithDirectViewerAccessField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WebPanoptoAPI.PanoptoAccessManagement.FolderAccessDetails FolderAccess {
            get {
                return this.FolderAccessField;
            }
            set {
                if ((object.ReferenceEquals(this.FolderAccessField, value) != true)) {
                    this.FolderAccessField = value;
                    this.RaisePropertyChanged("FolderAccess");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid[] GroupsWithDirectViewerAccess {
            get {
                return this.GroupsWithDirectViewerAccessField;
            }
            set {
                if ((object.ReferenceEquals(this.GroupsWithDirectViewerAccessField, value) != true)) {
                    this.GroupsWithDirectViewerAccessField = value;
                    this.RaisePropertyChanged("GroupsWithDirectViewerAccess");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool InheritViewerAccess {
            get {
                return this.InheritViewerAccessField;
            }
            set {
                if ((this.InheritViewerAccessField.Equals(value) != true)) {
                    this.InheritViewerAccessField = value;
                    this.RaisePropertyChanged("InheritViewerAccess");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsPublic {
            get {
                return this.IsPublicField;
            }
            set {
                if ((this.IsPublicField.Equals(value) != true)) {
                    this.IsPublicField = value;
                    this.RaisePropertyChanged("IsPublic");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid SessionId {
            get {
                return this.SessionIdField;
            }
            set {
                if ((this.SessionIdField.Equals(value) != true)) {
                    this.SessionIdField = value;
                    this.RaisePropertyChanged("SessionId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid[] UsersWithDirectViewerAccess {
            get {
                return this.UsersWithDirectViewerAccessField;
            }
            set {
                if ((object.ReferenceEquals(this.UsersWithDirectViewerAccessField, value) != true)) {
                    this.UsersWithDirectViewerAccessField = value;
                    this.RaisePropertyChanged("UsersWithDirectViewerAccess");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FolderAccessDetails", Namespace="http://schemas.datacontract.org/2004/07/Panopto.Server.Services.PublicAPI.V40")]
    [System.SerializableAttribute()]
    public partial class FolderAccessDetails : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid FolderIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid[] GroupsWithCreatorAccessField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid[] GroupsWithViewerAccessField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsPublicField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid[] UsersWithCreatorAccessField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid[] UsersWithViewerAccessField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid FolderId {
            get {
                return this.FolderIdField;
            }
            set {
                if ((this.FolderIdField.Equals(value) != true)) {
                    this.FolderIdField = value;
                    this.RaisePropertyChanged("FolderId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid[] GroupsWithCreatorAccess {
            get {
                return this.GroupsWithCreatorAccessField;
            }
            set {
                if ((object.ReferenceEquals(this.GroupsWithCreatorAccessField, value) != true)) {
                    this.GroupsWithCreatorAccessField = value;
                    this.RaisePropertyChanged("GroupsWithCreatorAccess");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid[] GroupsWithViewerAccess {
            get {
                return this.GroupsWithViewerAccessField;
            }
            set {
                if ((object.ReferenceEquals(this.GroupsWithViewerAccessField, value) != true)) {
                    this.GroupsWithViewerAccessField = value;
                    this.RaisePropertyChanged("GroupsWithViewerAccess");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsPublic {
            get {
                return this.IsPublicField;
            }
            set {
                if ((this.IsPublicField.Equals(value) != true)) {
                    this.IsPublicField = value;
                    this.RaisePropertyChanged("IsPublic");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid[] UsersWithCreatorAccess {
            get {
                return this.UsersWithCreatorAccessField;
            }
            set {
                if ((object.ReferenceEquals(this.UsersWithCreatorAccessField, value) != true)) {
                    this.UsersWithCreatorAccessField = value;
                    this.RaisePropertyChanged("UsersWithCreatorAccess");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid[] UsersWithViewerAccess {
            get {
                return this.UsersWithViewerAccessField;
            }
            set {
                if ((object.ReferenceEquals(this.UsersWithViewerAccessField, value) != true)) {
                    this.UsersWithViewerAccessField = value;
                    this.RaisePropertyChanged("UsersWithViewerAccess");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AccessRole", Namespace="http://schemas.datacontract.org/2004/07/Panopto.Server.Services.PublicAPI.V40")]
    public enum AccessRole : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Creator = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Viewer = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PanoptoAccessManagement.IAccessManagement")]
    public interface IAccessManagement {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccessManagement/GetUserAccessDetails", ReplyAction="http://tempuri.org/IAccessManagement/GetUserAccessDetailsResponse")]
        WebPanoptoAPI.PanoptoAccessManagement.UserAccessDetails GetUserAccessDetails(WebPanoptoAPI.PanoptoAccessManagement.AuthenticationInfo auth, System.Guid userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccessManagement/GetSelfUserAccessDetails", ReplyAction="http://tempuri.org/IAccessManagement/GetSelfUserAccessDetailsResponse")]
        WebPanoptoAPI.PanoptoAccessManagement.UserAccessDetails GetSelfUserAccessDetails(WebPanoptoAPI.PanoptoAccessManagement.AuthenticationInfo auth);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccessManagement/GetSessionAccessDetails", ReplyAction="http://tempuri.org/IAccessManagement/GetSessionAccessDetailsResponse")]
        WebPanoptoAPI.PanoptoAccessManagement.SessionAccessDetails GetSessionAccessDetails(WebPanoptoAPI.PanoptoAccessManagement.AuthenticationInfo auth, System.Guid sessionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccessManagement/GetFolderAccessDetails", ReplyAction="http://tempuri.org/IAccessManagement/GetFolderAccessDetailsResponse")]
        WebPanoptoAPI.PanoptoAccessManagement.FolderAccessDetails GetFolderAccessDetails(WebPanoptoAPI.PanoptoAccessManagement.AuthenticationInfo auth, System.Guid folderId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccessManagement/GetGroupAccessDetails", ReplyAction="http://tempuri.org/IAccessManagement/GetGroupAccessDetailsResponse")]
        WebPanoptoAPI.PanoptoAccessManagement.GroupAccessDetails GetGroupAccessDetails(WebPanoptoAPI.PanoptoAccessManagement.AuthenticationInfo auth, System.Guid groupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccessManagement/GrantUsersAccessToFolder", ReplyAction="http://tempuri.org/IAccessManagement/GrantUsersAccessToFolderResponse")]
        void GrantUsersAccessToFolder(WebPanoptoAPI.PanoptoAccessManagement.AuthenticationInfo auth, System.Guid folderId, System.Guid[] userIds, WebPanoptoAPI.PanoptoAccessManagement.AccessRole role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccessManagement/GrantUsersViewerAccessToSession", ReplyAction="http://tempuri.org/IAccessManagement/GrantUsersViewerAccessToSessionResponse")]
        void GrantUsersViewerAccessToSession(WebPanoptoAPI.PanoptoAccessManagement.AuthenticationInfo auth, System.Guid sessionId, System.Guid[] userIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccessManagement/GrantGroupAccessToFolder", ReplyAction="http://tempuri.org/IAccessManagement/GrantGroupAccessToFolderResponse")]
        void GrantGroupAccessToFolder(WebPanoptoAPI.PanoptoAccessManagement.AuthenticationInfo auth, System.Guid folderId, System.Guid groupId, WebPanoptoAPI.PanoptoAccessManagement.AccessRole role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccessManagement/GrantGroupViewerAccessToSession", ReplyAction="http://tempuri.org/IAccessManagement/GrantGroupViewerAccessToSessionResponse")]
        void GrantGroupViewerAccessToSession(WebPanoptoAPI.PanoptoAccessManagement.AuthenticationInfo auth, System.Guid sessionId, System.Guid groupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccessManagement/UpdateFolderIsPublic", ReplyAction="http://tempuri.org/IAccessManagement/UpdateFolderIsPublicResponse")]
        void UpdateFolderIsPublic(WebPanoptoAPI.PanoptoAccessManagement.AuthenticationInfo auth, System.Guid folderId, bool isPublic);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccessManagement/UpdateSessionIsPublic", ReplyAction="http://tempuri.org/IAccessManagement/UpdateSessionIsPublicResponse")]
        void UpdateSessionIsPublic(WebPanoptoAPI.PanoptoAccessManagement.AuthenticationInfo auth, System.Guid sessionId, bool isPublic);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccessManagement/UpdateSessionInheritViewerAccess", ReplyAction="http://tempuri.org/IAccessManagement/UpdateSessionInheritViewerAccessResponse")]
        void UpdateSessionInheritViewerAccess(WebPanoptoAPI.PanoptoAccessManagement.AuthenticationInfo auth, System.Guid sessionId, bool inheritViewerAccess);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccessManagement/RevokeUsersAccessFromFolder", ReplyAction="http://tempuri.org/IAccessManagement/RevokeUsersAccessFromFolderResponse")]
        void RevokeUsersAccessFromFolder(WebPanoptoAPI.PanoptoAccessManagement.AuthenticationInfo auth, System.Guid folderId, System.Guid[] userIds, WebPanoptoAPI.PanoptoAccessManagement.AccessRole role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccessManagement/RevokeUsersViewerAccessFromSession", ReplyAction="http://tempuri.org/IAccessManagement/RevokeUsersViewerAccessFromSessionResponse")]
        void RevokeUsersViewerAccessFromSession(WebPanoptoAPI.PanoptoAccessManagement.AuthenticationInfo auth, System.Guid sessionId, System.Guid[] userIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccessManagement/RevokeGroupAccessFromFolder", ReplyAction="http://tempuri.org/IAccessManagement/RevokeGroupAccessFromFolderResponse")]
        void RevokeGroupAccessFromFolder(WebPanoptoAPI.PanoptoAccessManagement.AuthenticationInfo auth, System.Guid folderId, System.Guid groupId, WebPanoptoAPI.PanoptoAccessManagement.AccessRole role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccessManagement/RevokeGroupViewerAccessFromSession", ReplyAction="http://tempuri.org/IAccessManagement/RevokeGroupViewerAccessFromSessionResponse")]
        void RevokeGroupViewerAccessFromSession(WebPanoptoAPI.PanoptoAccessManagement.AuthenticationInfo auth, System.Guid sessionId, System.Guid groupId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAccessManagementChannel : WebPanoptoAPI.PanoptoAccessManagement.IAccessManagement, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AccessManagementClient : System.ServiceModel.ClientBase<WebPanoptoAPI.PanoptoAccessManagement.IAccessManagement>, WebPanoptoAPI.PanoptoAccessManagement.IAccessManagement {
        
        public AccessManagementClient() {
        }
        
        public AccessManagementClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AccessManagementClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AccessManagementClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AccessManagementClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public WebPanoptoAPI.PanoptoAccessManagement.UserAccessDetails GetUserAccessDetails(WebPanoptoAPI.PanoptoAccessManagement.AuthenticationInfo auth, System.Guid userId) {
            return base.Channel.GetUserAccessDetails(auth, userId);
        }
        
        public WebPanoptoAPI.PanoptoAccessManagement.UserAccessDetails GetSelfUserAccessDetails(WebPanoptoAPI.PanoptoAccessManagement.AuthenticationInfo auth) {
            return base.Channel.GetSelfUserAccessDetails(auth);
        }
        
        public WebPanoptoAPI.PanoptoAccessManagement.SessionAccessDetails GetSessionAccessDetails(WebPanoptoAPI.PanoptoAccessManagement.AuthenticationInfo auth, System.Guid sessionId) {
            return base.Channel.GetSessionAccessDetails(auth, sessionId);
        }
        
        public WebPanoptoAPI.PanoptoAccessManagement.FolderAccessDetails GetFolderAccessDetails(WebPanoptoAPI.PanoptoAccessManagement.AuthenticationInfo auth, System.Guid folderId) {
            return base.Channel.GetFolderAccessDetails(auth, folderId);
        }
        
        public WebPanoptoAPI.PanoptoAccessManagement.GroupAccessDetails GetGroupAccessDetails(WebPanoptoAPI.PanoptoAccessManagement.AuthenticationInfo auth, System.Guid groupId) {
            return base.Channel.GetGroupAccessDetails(auth, groupId);
        }
        
        public void GrantUsersAccessToFolder(WebPanoptoAPI.PanoptoAccessManagement.AuthenticationInfo auth, System.Guid folderId, System.Guid[] userIds, WebPanoptoAPI.PanoptoAccessManagement.AccessRole role) {
            base.Channel.GrantUsersAccessToFolder(auth, folderId, userIds, role);
        }
        
        public void GrantUsersViewerAccessToSession(WebPanoptoAPI.PanoptoAccessManagement.AuthenticationInfo auth, System.Guid sessionId, System.Guid[] userIds) {
            base.Channel.GrantUsersViewerAccessToSession(auth, sessionId, userIds);
        }
        
        public void GrantGroupAccessToFolder(WebPanoptoAPI.PanoptoAccessManagement.AuthenticationInfo auth, System.Guid folderId, System.Guid groupId, WebPanoptoAPI.PanoptoAccessManagement.AccessRole role) {
            base.Channel.GrantGroupAccessToFolder(auth, folderId, groupId, role);
        }
        
        public void GrantGroupViewerAccessToSession(WebPanoptoAPI.PanoptoAccessManagement.AuthenticationInfo auth, System.Guid sessionId, System.Guid groupId) {
            base.Channel.GrantGroupViewerAccessToSession(auth, sessionId, groupId);
        }
        
        public void UpdateFolderIsPublic(WebPanoptoAPI.PanoptoAccessManagement.AuthenticationInfo auth, System.Guid folderId, bool isPublic) {
            base.Channel.UpdateFolderIsPublic(auth, folderId, isPublic);
        }
        
        public void UpdateSessionIsPublic(WebPanoptoAPI.PanoptoAccessManagement.AuthenticationInfo auth, System.Guid sessionId, bool isPublic) {
            base.Channel.UpdateSessionIsPublic(auth, sessionId, isPublic);
        }
        
        public void UpdateSessionInheritViewerAccess(WebPanoptoAPI.PanoptoAccessManagement.AuthenticationInfo auth, System.Guid sessionId, bool inheritViewerAccess) {
            base.Channel.UpdateSessionInheritViewerAccess(auth, sessionId, inheritViewerAccess);
        }
        
        public void RevokeUsersAccessFromFolder(WebPanoptoAPI.PanoptoAccessManagement.AuthenticationInfo auth, System.Guid folderId, System.Guid[] userIds, WebPanoptoAPI.PanoptoAccessManagement.AccessRole role) {
            base.Channel.RevokeUsersAccessFromFolder(auth, folderId, userIds, role);
        }
        
        public void RevokeUsersViewerAccessFromSession(WebPanoptoAPI.PanoptoAccessManagement.AuthenticationInfo auth, System.Guid sessionId, System.Guid[] userIds) {
            base.Channel.RevokeUsersViewerAccessFromSession(auth, sessionId, userIds);
        }
        
        public void RevokeGroupAccessFromFolder(WebPanoptoAPI.PanoptoAccessManagement.AuthenticationInfo auth, System.Guid folderId, System.Guid groupId, WebPanoptoAPI.PanoptoAccessManagement.AccessRole role) {
            base.Channel.RevokeGroupAccessFromFolder(auth, folderId, groupId, role);
        }
        
        public void RevokeGroupViewerAccessFromSession(WebPanoptoAPI.PanoptoAccessManagement.AuthenticationInfo auth, System.Guid sessionId, System.Guid groupId) {
            base.Channel.RevokeGroupViewerAccessFromSession(auth, sessionId, groupId);
        }
    }
}
